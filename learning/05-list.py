#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
------------------------------------------------------------------------------------------------------------------------

@Author: Bamboo
@Email: bamboo8493@126.com
@Datetime: 2019/8/20 12:43
@Description: 列表

------------------------------------------------------------------------------------------------------------------------

@Modifier: 
@Email: 
@Datetime: 2019/8/20 12:43
@Description: 

------------------------------------------------------------------------------------------------------------------------
"""

# 存储一堆数据 => list , 增删改查
list = [ 'bamboo', 'andy', 'jake', 'tom', 'alex', 'angle' ]


# 查找 S

# 下标如果是正数，从左往右（正向）开始数，下标默认从0开始数，正确读法为正数第n+1个数据
# 下标如果是负数，从右往左（反向）开始数，下标默认从-1开始数，正确读法为倒数第你n个数据

# 获取第一个数据，即下标为0
# print(list[0])

# 获取最后一个数据，即下标为-1
# print(list[-1])

"""
切片
把列表按照指定的开始索引和结束索引 开切，
得到的数据是原来列表中的一部分数据，这一部分数据叫片，从列表中切一部分数据叫切片；

语法为 list[start:end:step]
    start: 开始索引，可选，默认从0开始，含头不含尾（如果有结束下标，不会取到结束下标的数据）
    end: 结束索引，可选，默认到结尾
    step: 步长（正负代表切片方向，数字代表切片步长，即隔n个取一个），可选，默认为1
"""

# 从正数第0个下标开始切，到正数第1个下标结束，不包含结束下标，其实只切到了下标为0的一个数据
# print(list[0:1])

# 从正数第1个下标开始切，到正数第3个下标结束，不包含结束下标，其实只切到了下标为1和2的两个数据
# print(list[1:3])

# 从正数第1个下标开始切，想切到后面的所有数据，包含结束下标，其实切到了下标为1~最后1个下标的数据
# print(list[1:])


# 从倒数第4个数据开始切，想切到后面的所有数据，包含结束下标，其实切到了倒数第4个到最后1个的数据
# print(list[-4:])

# 从倒数第4个数据开始切，想切到倒数第2个数据，不包含结束下标，其实切到了倒数第4个到最后2个的数据
# print(list[-4:-2])

# 从倒数第4个数据开始切，想切到正数第3个数据，不包含结束下标，
# 注意：由于这里只有6个元素，所以实际上倒数第4个元素是正数下标为2的元素，所以实际上切的是正数下标为2~3的元素
#   由于这种表示方法与正常思维差异比较大，建议按实际情况来使用其他方式代替
# print(list[-4:3])


# 从正数第1个下标开始切，到正数第3个下标结束，不包含结束下标，步长为1，其实只切到了下标为1和2的两个数据
# print(list[1:3:1])

# 从正数第1个下标开始切，到正数第5个下标结束，不包含结束下标，步长为2，其实只切到了下标为1和3的两个数据
# print(list[1:5:2])

# 从倒数第1个数据开始切，到倒数（方向为负）最后一个数据结束，包含结束下标，步长为1，其实是做了数据的反转reverse
# print(list[::-1])

# 从正数第2个下标开始切，到倒数（方向为负）最后一个数据结束，包含结束下标，步长为1，其实只切到了下标为3、2、1的三个数据
# print(list[2::-1])

# 从正数第2个下标开始切，到倒数（方向为负）最后一个数据结束，包含结束下标，步长为2，其实只切到了下标为2和0的两个数据
# print(list[2::-2])

# 从正数第2个下标开始切，到倒数（方向为负）最后一个数据结束，不包含结束下标，步长为1，其实一个数据都切不到
# 2 ~ -1 , 此时已指定好了方向，这时再通过步长来转换方向，即从2 ~ 0获取数据，
# 跟指定好的结束下标没有交集，所以是取不到数据的，即为空list
# print(list[2:-1:-1])


# in 判断元素是否在list中
# print('buster' in list)

# 查找 E


# 添加 S

# append insert, 注意：一次只能插入一个数据

# append 在list尾部追加数据
# list.append('shawshank')

# insert 在指定的下标处插入数据
# list.insert(1, 'emma')

# insert 在尾部插入，等同于append
# list.insert(len(list), 'romen')

# insert 在头部插入
# list.insert(0, 'larissa')

# print(list)
# 添加 E


# 修改 S

# 修改一个数据
# list[0] = 'sophia'

# 修改切片数据 谨慎操作
# list[1:3] = ['joyce', 'ashley']
# 注意: 当右边赋值的list长度小于左边list切片的长度时，会删除掉list中未赋值的索引对应数据
# list[1:3] = ['carl']
# 注意: 当右边赋值的list长度大于左边list切片的长度时，会整个添加到list中初始索引对应的数据
# list[1:3] = ['kevin', 'aurora', 'isabella']

# print(list)

# 修改 E

# 删除 S

# remove 删除指定的数据
# list.remove('jake')

# pop 如果不传递下标，默认删除最后一个数据，如果传递下标，删除指定下标的数据
# list.pop(1)

# del 万能删 谨慎使用
# del list[0]

# clear 清空list
# list.clear()

# print(list)

# 删除 E


# count 计算数据在list中出现的次数
# print([ 'to', 'be', 'to', 'be', 'to', 'be' ].count('to'))


# extend 把传入的list拆分成一个一个数据，挨个添加到原有list结尾，改变原list
# a = [1, 2, 3]
# b = [4, 5, 6]
# a.extend(b)
# print(a)
# print(b)

# + 把b拆分成一个一个数据，挨个添加到a的尾部，生成一个新的list，不会改变a或b
# a = [1, 2, 3]
# b = [4, 5, 6]
# print(a + b)



# index 查找数据在list中的下标
# print(['van', 'blacky', 'rose'].index('rose'))


# reverse list反转
# a = ['van', 'blacky', 'rose']
# a.reverse()
# print(a)


# sort list排序（升序），排序规则是根据ascii码进行排序，通过reverse=bool 来控制升序或降序
# x = [4, 12, 23, 41, 6, 2]
# x.sort()
# print(x)
#
# 若需要降序，可使用reverse=True
# x.sort(reverse=True)
# print(x)
#
# a = ['van', 'blacky', 'rose']
# a.sort()
# print(a)
#
# b = ['van', 'blacky', 'rose', 'Alex', 'Romen']
# b.sort()
# print(b)


# 判断数据类型是否为list类型
# print(type([1, 2, 3]) is list)


# 获取list中元素的下标和数据
# for index, item in enumerate(['van', 'blacky', 'rose', 'van', 'blacky', 'rose']):
#     print(index)